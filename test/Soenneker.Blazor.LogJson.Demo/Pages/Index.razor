@page "/"
@using Microsoft.Extensions.Logging
@using Soenneker.Blazor.LogJson.Abstract
@using Soenneker.Blazor.LogJson.Demo.Dtos
@using Soenneker.Utils.AutoBogus
@using Soenneker.Utils.Json
@inject ILogger<Index> Logger
@inject ILogJsonInterop LogJsonInterop

<div class="hero-section">
    <div class="hero-content">
        <h1>LogJson Demo</h1>
        <p class="lead">Professional JSON logging interop for Blazor WebAssembly applications</p>
        <div class="status-indicator status-info">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
                <path d="M12 16V12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                <circle cx="12" cy="8" r="1" fill="currentColor"/>
            </svg>
            Ready to demonstrate logging capabilities
        </div>
    </div>
</div>

<div class="grid grid-cols-1 gap-8 mt-8">
    <!-- Feature Card -->
    <div class="card">
        <div class="card-header">
            <h2 class="card-title">Interactive Demo</h2>
            <p class="card-subtitle">Generate and log sample data to see LogJson in action</p>
        </div>
        <div class="card-body">
            <p>Click the button below to generate a random person object and log it as JSON to the browser console. This demonstrates the core functionality of the LogJson interop.</p>
            
            <div class="demo-actions">
                <button class="btn btn-primary" @onclick="LogString" disabled="@isLogging">
                    @if (isLogging)
                    {
                        <div class="loading"></div>
                    }
                    else
                    {
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M9 12L11 14L15 10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2"/>
                        </svg>
                    }
                    @(isLogging ? "Logging..." : "Generate & Log Person")
                </button>
                
                @if (lastLoggedPerson != null)
                {
                    <div class="logged-data">
                        <h4>Last Logged Data:</h4>
                        <div class="code-block">
                            @JsonUtil.Serialize(lastLoggedPerson)
                        </div>
                        <div class="status-indicator status-success">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M9 12L11 14L15 10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <path d="M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2"/>
                            </svg>
                            Successfully logged to console
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Features Overview -->
    <div class="grid grid-cols-3 gap-6">
        <div class="card">
            <div class="card-body text-center">
                <div class="feature-icon">
                    <svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M14 2H6C4.89543 2 4 2.89543 4 4V20C4 21.1046 4.89543 22 6 22H18C19.1046 22 20 21.1046 20 20V8L14 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M14 2V8H20" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M16 13H8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M16 17H8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M10 9H8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </div>
                <h3>JSON Logging</h3>
                <p class="text-muted">Efficiently log structured JSON data directly to the browser console with proper formatting and grouping.</p>
            </div>
        </div>

        <div class="card">
            <div class="card-body text-center">
                <div class="feature-icon">
                    <svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M2 17L12 22L22 17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M2 12L12 17L22 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </div>
                <h3>Blazor Integration</h3>
                <p class="text-muted">Seamlessly integrated with Blazor WebAssembly for easy JavaScript interop and console logging.</p>
            </div>
        </div>

        <div class="card">
            <div class="card-body text-center">
                <div class="feature-icon">
                    <svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="currentColor" stroke-width="2"/>
                        <path d="M12 6V12L16 14" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </div>
                <h3>Performance</h3>
                <p class="text-muted">Lightweight and performant logging solution designed for modern web applications.</p>
            </div>
        </div>
    </div>

    <!-- Navigation Card -->
    <div class="card">
        <div class="card-body">
            <h3>Explore More Features</h3>
            <p>Visit the Advanced page to see more complex logging scenarios and grouping functionality.</p>
            <NavLink href="/second" class="btn btn-outline">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M5 12H19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M12 5L19 12L12 19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                Go to Advanced Demo
            </NavLink>
        </div>
    </div>
</div>

@code {
    private bool isLogging = false;
    private Person? lastLoggedPerson;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LogJsonInterop.Log("{\"page\":\"home\",\"loaded\":true,\"timestamp\":\"" + DateTime.UtcNow.ToString("O") + "\"}", "page-lifecycle");
        }
    }

    private async Task LogString()
    {
        isLogging = true;
        StateHasChanged();

        try
        {
            var person = new AutoFaker<Person>().Generate();
            lastLoggedPerson = person;

            await LogJsonInterop.Log(JsonUtil.Serialize(person), "person");
            
            // Add a small delay to show the loading state
            await Task.Delay(500);
        }
        finally
        {
            isLogging = false;
            StateHasChanged();
        }
    }
}
